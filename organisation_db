-- создание таблиц

CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100) NOT NULL
);

CREATE TABLE Roles (
    RoleID INT PRIMARY KEY,
    RoleName VARCHAR(100) NOT NULL
);

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Position VARCHAR(100),
    ManagerID INT,
    DepartmentID INT,
    RoleID INT,
    FOREIGN KEY (ManagerID) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID),
    FOREIGN KEY (RoleID) REFERENCES Roles(RoleID)
);

CREATE TABLE Projects (
    ProjectID INT PRIMARY KEY,
    ProjectName VARCHAR(100) NOT NULL,
    StartDate DATE,
    EndDate DATE,
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

CREATE TABLE Tasks (
    TaskID INT PRIMARY KEY,
    TaskName VARCHAR(100) NOT NULL,
    AssignedTo INT,
    ProjectID INT,
    FOREIGN KEY (AssignedTo) REFERENCES Employees(EmployeeID),
    FOREIGN KEY (ProjectID) REFERENCES Projects(ProjectID)
);


-- наполнение таблиц

INSERT INTO Departments (DepartmentID, DepartmentName) VALUES
(1, 'Отдел продаж'),
(2, 'Отдел маркетинга'),
(3, 'IT-отдел'),
(4, 'Отдел разработки'),
(5, 'Отдел поддержки');

INSERT INTO Roles (RoleID, RoleName) VALUES
(1, 'Менеджер'),
(2, 'Директор'),
(3, 'Генеральный директор'),
(4, 'Разработчик'),
(5, 'Специалист по поддержке'),
(6, 'Маркетолог');

INSERT INTO Employees (EmployeeID, Name, Position, ManagerID, DepartmentID, RoleID) VALUES
(1, 'Иван Иванов', 'Генеральный директор', NULL, 1, 3),
(2, 'Петр Петров', 'Директор по продажам', 1, 1, 2),
(3, 'Светлана Светлова', 'Директор по маркетингу', 1, 2, 2),
(4, 'Алексей Алексеев', 'Менеджер по продажам', 2, 1, 1),
(5, 'Мария Мариева', 'Менеджер по маркетингу', 3, 2, 1),
(6, 'Андрей Андреев', 'Разработчик', 1, 4, 4),
(7, 'Елена Еленова', 'Специалист по поддержке', 1, 5, 5),
(8, 'Олег Олегов', 'Менеджер по продукту', 2, 1, 1),
(9, 'Татьяна Татеева', 'Маркетолог', 3, 2, 6),
(10, 'Николай Николаев', 'Разработчик', 6, 4, 4),
(11, 'Ирина Иринина', 'Разработчик', 6, 4, 4),
(12, 'Сергей Сергеев', 'Специалист по поддержке', 7, 5, 5),
(13, 'Кристина Кристинина', 'Менеджер по продажам', 4, 1, 1),
(14, 'Дмитрий Дмитриев', 'Маркетолог', 3, 2, 6),
(15, 'Виктор Викторов', 'Менеджер по продажам', 4, 1, 1),
(16, 'Анастасия Анастасиева', 'Специалист по поддержке', 7, 5, 5),
(17, 'Максим Максимов', 'Разработчик', 6, 4, 4),
(18, 'Людмила Людмилова', 'Специалист по маркетингу', 3, 2, 6),
(19, 'Наталья Натальева', 'Менеджер по продажам', 4, 1, 1),
(20, 'Александр Александров', 'Менеджер по маркетингу', 3, 2, 1),
(21, 'Галина Галина', 'Специалист по поддержке', 7, 5, 5),
(22, 'Павел Павлов', 'Разработчик', 6, 4, 4),
(23, 'Марина Маринина', 'Специалист по маркетингу', 3, 2, 6),
(24, 'Станислав Станиславов', 'Менеджер по продажам', 4, 1, 1),
(25, 'Екатерина Екатеринина', 'Специалист по поддержке', 7, 5, 5),
(26, 'Денис Денисов', 'Разработчик', 6, 4, 4),
(27, 'Ольга Ольгина', 'Маркетолог', 3, 2, 6),
(28, 'Игорь Игорев', 'Менеджер по продукту', 2, 1, 1),
(29, 'Анастасия Анастасиевна', 'Специалист по поддержке', 7, 5, 5),
(30, 'Валентин Валентинов', 'Разработчик', 6, 4, 4);

INSERT INTO Projects (ProjectID, ProjectName, StartDate, EndDate, DepartmentID) VALUES
(1, 'Проект A', '2025-01-01', '2025-12-31', 1),
(2, 'Проект B', '2025-02-01', '2025-11-30', 2),
(3, 'Проект C', '2025-03-01', '2025-10-31', 4),
(4, 'Проект D', '2025-04-01', '2025-09-30', 5),
(5, 'Проект E', '2025-05-01', '2025-08-31', 3);

INSERT INTO Tasks (TaskID, TaskName, AssignedTo, ProjectID) VALUES
(1, 'Задача 1: Подготовка отчета по продажам', 4, 1),
(2, 'Задача 2: Анализ рынка', 9, 2),
(3, 'Задача 3: Разработка нового функционала', 10, 3),
(4, 'Задача 4: Поддержка клиентов', 12, 4),
(5, 'Задача 5: Создание рекламной кампании', 5, 2),
(6, 'Задача 6: Обновление документации', 6, 3),
(7, 'Задача 7: Проведение тренинга для сотрудников', 8, 1),
(8, 'Задача 8: Тестирование нового продукта', 11, 3),
(9, 'Задача 9: Ответы на запросы клиентов', 12, 4),
(10, 'Задача 10: Подготовка маркетинговых материалов', 9, 2),
(11, 'Задача 11: Интеграция с новым API', 10, 3),
(12, 'Задача 12: Настройка системы поддержки', 7, 5),
(13, 'Задача 13: Проведение анализа конкурентов', 9, 2),
(14, 'Задача 14: Создание презентации для клиентов', 4, 1),
(15, 'Задача 15: Обновление сайта', 6, 3);


-- ЗАДАНИЕ 1
/*
Найти всех сотрудников, подчиняющихся Ивану Иванову (с EmployeeID = 1), включая их подчиненных и подчиненных подчиненных. 
Для каждого сотрудника вывести следующую информацию:

    EmployeeID: идентификатор сотрудника.
    Имя сотрудника.
    ManagerID: Идентификатор менеджера.
    Название отдела, к которому он принадлежит.
    Название роли, которую он занимает.
    Название проектов, к которым он относится (если есть, конкатенированные в одном столбце через запятую).
    Название задач, назначенных этому сотруднику (если есть, конкатенированные в одном столбце через запятую).
    Если у сотрудника нет назначенных проектов или задач, отобразить NULL.

Требования:

    Рекурсивно извлечь всех подчиненных сотрудников Ивана Иванова и их подчиненных.
    Для каждого сотрудника отобразить информацию из всех таблиц.
    Результаты должны быть отсортированы по имени сотрудника.
    Решение задачи должно представлять из себя один sql-запрос и задействовать ключевое слово RECURSIVE.

*/
WITH RECURSIVE RecursiveEmployees AS (
    SELECT 
        EmployeeID, 
        Name,
        ManagerID,
    	DepartmentID,
    	RoleID
    FROM Employees
    WHERE EmployeeID = 1 

    UNION ALL

    SELECT 
        e.EmployeeID,
        e.Name,
        e.ManagerID,
    	e.DepartmentID,
    	e.RoleID
    FROM Employees e
    INNER JOIN RecursiveEmployees re ON e.ManagerID = re.EmployeeID
)
SELECT 
    re.EmployeeID,
    re.Name,
    re.ManagerID,
    d.DepartmentName,
    r.RoleName,
    GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ', ') AS ProjectNames,
    GROUP_CONCAT(DISTINCT t.TaskName SEPARATOR ', ') AS TaskNames
FROM RecursiveEmployees re
LEFT JOIN Departments d ON re.DepartmentID = d.DepartmentID
LEFT JOIN Roles r ON re.RoleID = r.RoleID
LEFT JOIN Projects p ON p.DepartmentID = re.DepartmentID
LEFT JOIN Tasks t ON t.AssignedTo = re.EmployeeID
GROUP BY re.EmployeeID, re.Name, re.ManagerID, d.DepartmentName, r.RoleName
ORDER BY re.Name;

-- ЗАДАНИЕ 2
/*
Найти всех сотрудников, подчиняющихся Ивану Иванову с EmployeeID = 1, включая их подчиненных и подчиненных подчиненных. 
Для каждого сотрудника вывести следующую информацию:

    EmployeeID: идентификатор сотрудника.
    Имя сотрудника.
    Идентификатор менеджера.
    Название отдела, к которому он принадлежит.
    Название роли, которую он занимает.
    Название проектов, к которым он относится (если есть, конкатенированные в одном столбце).
    Название задач, назначенных этому сотруднику (если есть, конкатенированные в одном столбце).
    Общее количество задач, назначенных этому сотруднику.
    Общее количество подчиненных у каждого сотрудника (не включая подчиненных их подчиненных).
    Если у сотрудника нет назначенных проектов или задач, отобразить NULL.


*/
WITH RECURSIVE RecursiveEmployees AS (
    SELECT 
        e.EmployeeID,
        e.Name,
        e.ManagerID,
        e.DepartmentID,
        e.RoleID
    FROM Employees e
    WHERE e.ManagerID = 1 

    UNION ALL

    SELECT 
        e.EmployeeID,
        e.Name,
        e.ManagerID,
        e.DepartmentID,
        e.RoleID
    FROM Employees e
    INNER JOIN RecursiveEmployees re ON e.ManagerID = re.EmployeeID
)
SELECT 
    re.EmployeeID,
    re.Name,
    re.ManagerID,
    d.DepartmentName,
    r.RoleName,
    GROUP_CONCAT(DISTINCT p.ProjectName SEPARATOR ', ') AS ProjectNames,
    GROUP_CONCAT(DISTINCT t.TaskName SEPARATOR ', ') AS TaskNames,
    COUNT(DISTINCT t.TaskID) AS TotalTasks,
    (SELECT COUNT(*) 
     FROM Employees sub 
     WHERE sub.ManagerID = re.EmployeeID) AS TotalSubordinates
FROM RecursiveEmployees re
LEFT JOIN Departments d ON re.DepartmentID = d.DepartmentID
LEFT JOIN Roles r ON re.RoleID = r.RoleID
LEFT JOIN Projects p ON p.DepartmentID = re.DepartmentID
LEFT JOIN Tasks t ON t.AssignedTo = re.EmployeeID
GROUP BY re.EmployeeID, re.Name, re.ManagerID, d.DepartmentName, r.RoleName
ORDER BY re.Name;

-- ЗАДАНИЕ 3
/*
Найти всех сотрудников, которые занимают роль менеджера и имеют подчиненных (то есть число подчиненных больше 0). 
Для каждого такого сотрудника вывести следующую информацию:

    EmployeeID: идентификатор сотрудника.
    Имя сотрудника.
    Идентификатор менеджера.
    Название отдела, к которому он принадлежит.
    Название роли, которую он занимает.
    Название проектов, к которым он относится (если есть, конкатенированные в одном столбце).
    Название задач, назначенных этому сотруднику (если есть, конкатенированные в одном столбце).
    Общее количество подчиненных у каждого сотрудника (включая их подчиненных).
    Если у сотрудника нет назначенных проектов или задач, отобразить NULL.



*/
WITH RECURSIVE RecursiveEmployees AS (
    SELECT 
        e.EmployeeID,
        e.Name,
        e.ManagerID,
        e.DepartmentID,
        r.RoleName
    FROM Employees e
    INNER JOIN Roles r ON e.RoleID = r.RoleID
    WHERE r.RoleName = 'Менеджер'  
    UNION ALL
    SELECT 
        e.EmployeeID,
        e.Name,
        e.ManagerID,
        e.DepartmentID,
        r.RoleName
    FROM Employees e
    INNER JOIN RecursiveEmployees re ON e.ManagerID = re.EmployeeID
    INNER JOIN Roles r ON e.RoleID = r.RoleID
)
SELECT 
    re.EmployeeID,
    re.Name,
    re.ManagerID,
    d.DepartmentName,
    re.RoleName,
    GROUP_CONCAT(DISTINCT p.ProjectName) AS ProjectNames,
    GROUP_CONCAT(DISTINCT t.TaskName) AS TaskNames,
    COUNT(re2.EmployeeID) AS TotalSubordinates
FROM RecursiveEmployees re
LEFT JOIN Departments d ON re.DepartmentID = d.DepartmentID
LEFT JOIN Projects p ON p.DepartmentID = re.DepartmentID
LEFT JOIN Tasks t ON t.AssignedTo = re.EmployeeID
LEFT JOIN RecursiveEmployees re2 ON re.EmployeeID = re2.ManagerID 
WHERE re.ManagerID IS NOT NULL  
GROUP BY re.EmployeeID, re.Name, re.ManagerID, d.DepartmentName, re.RoleName
HAVING COUNT(re2.EmployeeID) > 0 
ORDER BY re.Name;